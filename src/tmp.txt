class BaseModelForMultipleChoice(BaseModel):

    FINAL_CHOICE_PATTERN = re.compile(r"\{\"final_choice\": \"(.+?)\"\}", flags=re.I)

    async def extract_final_choice(
        self,
        session,
        user_query,
        sys_answer,
    ):
        answer_candidates = self.FINAL_CHOICE_PATTERN.findall(sys_answer)
        if answer_candidates:
            answer_candidate = answer_candidates[-1][0].upper()
            if answer_candidate in ["A", "B", "C", "D", "E"]:
                return answer_candidate
        prompt = self.tokenizer.apply_chat_template(
            [{"role": "user", "content": user_query}], 
            tokenize=False, add_generation_prompt=True
        ) + sys_answer + "\nFinal answer: "
        data = self.format_request_payload(
            prompt, 
            max_tokens=1,
            allowed_token_ids=[
                self.tokenizer.convert_tokens_to_ids("A"),
                self.tokenizer.convert_tokens_to_ids("B"),
                self.tokenizer.convert_tokens_to_ids("C"),
                self.tokenizer.convert_tokens_to_ids("D"),
                self.tokenizer.convert_tokens_to_ids("E"),
            ]
        )
        resp = await self.request(session=session, data=data)
        return resp[0]
